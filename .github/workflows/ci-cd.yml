name: CI/CD Pipeline

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx pytest-cov flake8 black


#    - name: Test with pytest
#      run: |
#        pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing

#  security:
#    runs-on: ubuntu-latest
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: 3.11
#
#    - name: Install safety
#      run: pip install safety bandit
#
#    - name: Check for security vulnerabilities
#      run: |
#        safety check --json
#        bandit -r src/ -f json

  build:
    needs: [test] # add security also
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

#  deploy-staging:
#    needs: build
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/develop'
#    environment: staging
#
#    steps:
#    - name: Deploy to staging
#      run: |
#        echo "Deploying to staging environment"
#        # Add your staging deployment commands here
#        # For example, using SSH to deploy to a staging server:
#        # ssh user@staging-server "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop && docker-compose up -d"
#
#  deploy-production:
#    needs: build
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#    environment: production
#
#    steps:
#    - name: Deploy to production
#      run: |
#        echo "Deploying to production environment"
#        # Add your production deployment commands here
#        # For example, using SSH to deploy to a production server:
#        # ssh user@production-server "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && docker-compose up -d"
